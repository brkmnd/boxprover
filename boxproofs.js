var BoxProofs = function(){
    var actionType = {
        shift:function(d){
            return {type:"shift",v:d};
            },
        reduce:function(d){
            return {type:"reduce",v:d};
            },
        accept:function(d){
            return {type:"accept",v:null};
            },
        error:function(){
            return {type:"error",v:"syntax error"};
            },
        none:function(){
            return {type:"none",v:null};
            },
        some:function(v){
            return {type:"some",v:v}
            }
        };
    var isSome = function(m){
        return m.t === "some";
        };
    var isNone = function(m){
        return m.t === "none";
        };
    var _token = function(m,o){
        //m.tv = token val
        //m.t = some/none
        //m.v = value if some, else null
        if(o[m.tt] !== undefined){
            return o[m.tt](m.tt,m.tv);
            }
        };
    /* Add tokens to the tree here.
     * That is: Change Me!
     */
    var addToken2tree = function(tree,node){
        _token(node,{
            "name":function(tokenType,tokenVal){
                var n = tokenVal;
                if(n[0] === '"'){
                    n = n.replace(/<|>/g,function(x){
                        if(x === "<"){
                            return "&lt;";
                            }
                        return "&gt;";
                    });
                    n = n.substr(1);
                    n = n.substr(0,n.length - 1);
                    }
                tree.push({type:"name",v:n});
                }
           });
        return tree;
        };
    var errors = {
        syntax:function(pos,msg){
            return "syntax error at (" + pos.y + "," + pos.x + ")";
            },
        garbage:function(g){
            return "garbage in expression: '" + g + "'";
            }
        };
    /* Change Me! Create the abstract syntax tree here */
    var productions_fun = {
        //[0] __ -> Lines 
        0:function(tree){ return tree; },
        //[1] Lines -> Line LinesOptEnd 
        1:function(tree){
            var eol = tree.pop();
            var line = tree.pop();
            var lines = eol.lines;
            line.name = eol.name;
            lines.push(line);
            tree.push({type:"lines",lines:lines});
            return tree;
            },
        //[2] LinesOptEnd -> 
        2:function(tree){
            tree.push({type:"eol",name:" ",lines:[]});
            return tree;
            },
        //[3] LinesOptEnd -> dot 
        3:function(tree){
            tree.push({type:"eol",name:" ",lines:[]});
            return tree;
            },
        //[4] LinesOptEnd -> Lines 
        4:function(tree){
            var lines = tree.pop();
            var name = ".na";
            tree.push({type:"eol",name:name,lines:lines.lines});
            return tree;
            },
        //[5] LinesOptEnd -> Naming Lines 
        5:function(tree){
            var lines = tree.pop();
            var name = tree.pop();
            tree.push({type:"eol",name:name.v,lines:lines.lines});
            return tree;
            },
        //[6] LinesOptEnd -> scolon Naming Lines 
        6:function(tree){
            var lines = tree.pop();
            var name = tree.pop();
            tree.push({type:"eol",name:name.v,lines:lines.lines});
            return tree;
            },
        //[7] Line -> uscore 
        7:function(tree){
            tree.push({type:"line",formula:{type:"hole"},rule:{name:"hole"}})
            return tree;
            },
        //[8] Line -> lpar Box rpar 
        8:function(tree){ return tree; },
        //[9] Line -> Formula Rule 
        9:function(tree){
            var rule = tree.pop();
            var formula = tree.pop();
            tree.push({type:"line",formula:formula,rule:rule});
            return tree;
            },
        //[10] Rule -> by RuleApply 
        10:function(tree){ return tree; },
        //[11] Rule -> assump 
        11:function(tree){
            tree.push({type:"rule","name":["assumption"],args:[]});
            return tree;
            },
        //[12] Rule -> prem 
        12:function(tree){
            tree.push({type:"rule","name":["premise"],args:[]});
            return tree;
            },
        //[13] Box -> Lines 
        13:function(tree){
            var lines = tree.pop();
            tree.push({type:"box",bvar:"",lines:lines.lines});
            return tree;
            },
        //[14] Box -> var Naming Lines 
        14:function(tree){
            var lines = tree.pop();
            var bvar = tree.pop();
            tree.push({type:"box",bvar:bvar.v,lines:lines.lines});
            return tree;
            },
        //[15] RuleApply -> copy name 
        15:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["copy"],args:[arg]});
            return tree;
            },
        //[16] RuleApply -> eq_e Bind name name 
        16:function(tree){
            var arg2 = tree.pop();
            var arg1 = tree.pop();
            //throw away for now.
            var bind = tree.pop();
            tree.push({type:"rule",name:["eq","e"],args:[arg1,arg2]});
            return tree; },
        //[17] RuleApply -> eq_i 
        17:function(tree){
            tree.push({type:"rule",name:["eq","i"],args:[]});
            return tree; },
        //[18] RuleApply -> exi_e name name 
        18:function(tree){
            var arg2 = tree.pop();
            var arg1 = tree.pop();
            tree.push({type:"rule",name:["exi","e"],args:[arg1,arg2]});
            return tree; },
        //[19] RuleApply -> exi_i name name 
        19:function(tree){
            var arg2 = tree.pop();
            var arg1 = tree.pop();
            tree.push({type:"rule",name:["exi","i"],args:[arg1,arg2]});
            return tree; },
        //[20] RuleApply -> all_e name name 
        20:function(tree){
            var arg2 = tree.pop();
            //arg1 is binding var - ignore
            var arg1 = tree.pop();
            tree.push({type:"rule",name:["all","e"],args:[arg2]});
            return tree;
            },
        //[21] RuleApply -> all_i name 
        21:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["all","i"],args:[arg]});
            return tree; },
        //[22] RuleApply -> mt name name 
        22:function(tree){
            var arg3 = tree.pop();
            var arg2 = tree.pop();
            tree.push({type:"rule",name:["mt"],args:[arg2,arg3]});
            return tree; },
        //[23] RuleApply -> pbc name 
        23:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["pbc"],args:[arg]});
            return tree; },
        //[24] RuleApply -> lem 
        24:function(tree){
            tree.push({type:"rule",name:["lem"],args:[]});
            return tree; },
        //[25] RuleApply -> nni name 
        25:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["nn","i"],args:[arg]});
            return tree; },
        //[26] RuleApply -> nne name 
        26:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["nn","e"],args:[arg]});
            return tree; },
        //[27] RuleApply -> bot_e name 
        27:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["bot","e"],args:[arg]});
            return tree; },
        //[28] RuleApply -> neg_e name name 
        28:function(tree){
            var arg3 = tree.pop();
            var arg2 = tree.pop();
            tree.push({type:"rule",name:["neg","e"],args:[arg2,arg3]});
            return tree; },
        //[29] RuleApply -> neg_i name 
        29:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["neg","i"],args:[arg]});
            return tree; },
        //[30] RuleApply -> imp_e name name 
        30:function(tree){
            var arg3 = tree.pop();
            var arg2 = tree.pop();
            tree.push({type:"rule",name:["imp","e"],args:[arg2,arg3]});
            return tree; },
        //[31] RuleApply -> imp_i name 
        31:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["imp","i"],args:[arg]});
            return tree; },
        //[32] RuleApply -> dis_e name name name 
        32:function(tree){
            var arg4 = tree.pop();
            var arg3 = tree.pop();
            var arg2 = tree.pop();
            tree.push({type:"rule",name:["dis","e"],args:[arg2,arg3,arg4]});
            return tree; },
        //[33] RuleApply -> dis_i2 name 
        33:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["dis","i","2"],args:[arg]});
            return tree; },
        //[34] RuleApply -> dis_i1 name 
        34:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["dis","i","1"],args:[arg]});
            return tree; },
        //[35] RuleApply -> con_e2 name 
        35:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["and","e","2"],args:[arg]});
            return tree; },
        //[36] RuleApply -> con_e1 name 
        36:function(tree){
            var arg = tree.pop();
            tree.push({type:"rule",name:["and","e","1"],args:[arg]});
            return tree; },
        //[37] RuleApply -> con_i name name 
        37:function(tree){
            var arg3 = tree.pop();
            var arg2 = tree.pop();
            tree.push({type:"rule",name:["and","i"],args:[arg2,arg3]});
            return tree; },
        //[38] RuleApply -> top_i 
        38:function(tree){
            tree.push({type:"rule",name:["top","i"],args:[]});
            return tree; },
        //[39] Naming -> lbracket name rbracket 
        39:function(tree){ return tree; },
        //[40] Formula -> Atom 
        40:function(tree){ return tree; },
        //[41] Formula -> not Formula 
        41:function(tree){
            var arg = tree.pop();
            tree.push({type:"connective",name:"not",args:[arg]});
            return tree; },
        //[42] Formula -> exi Bind 
        42:function(tree){
            var bind = tree.pop();
            tree.push({type:"quant",name:"exi",bvar:bind.bvar,args:[bind.formula]})
            return tree;
            },
        //[43] Formula -> all Bind 
        43:function(tree){
            var bind = tree.pop();
            tree.push({type:"quant",name:"all",bvar:bind.bvar,args:[bind.formula]})
            return tree;
            },
        //[44] Formula -> Formula eq Formula 
        44:function(tree){
            var arg3 = tree.pop();
            var arg2 = tree.pop();
            tree.push({type:"connective",name:"eq",args:[arg2,arg3]});
            return tree;
            },
        //[45] Formula -> Formula imp Formula 
        45:function(tree){
            var arg3 = tree.pop();
            var arg2 = tree.pop();
            tree.push({type:"connective",name:"imp",args:[arg2,arg3]});
            return tree;
            },
        //[46] Formula -> Formula or Formula 
        46:function(tree){
            var arg3 = tree.pop();
            var arg2 = tree.pop();
            tree.push({type:"connective",name:"or",args:[arg2,arg3]});
            return tree;
            },
        //[47] Formula -> Formula and Formula 
        47:function(tree){
            var arg3 = tree.pop();
            var arg2 = tree.pop();
            tree.push({type:"connective",name:"and",args:[arg2,arg3]});
            return tree;
            },
        //[48] Bind -> lpar Naming Formula rpar 
        48:function(tree){
            var formula = tree.pop();
            var bvar = tree.pop();
            tree.push({type:"bind",formula:formula,bvar:bvar.v});
            return tree;
            },
        //[49] Atom -> name OptArgs 
        49:function(tree){
            var f = tree.pop();
            var fname = tree.pop();
            f.name = fname.v;
            f.type = "atom";
            tree.push(f);
            return tree;
            },
        //[50] Atom -> lpar Formula rpar 
        50:function(tree){
            //mark as par
            var formula = tree.pop();
            tree.push({type:"par",args:[formula]});
            return tree;
            },
        //[51] OptArgs -> 
        51:function(tree){
            tree.push({type:"fun",args:[]});
            return tree;
            },
        //[52] OptArgs -> lpar Formula rpar OptArgs 
        52:function(tree){
            var f = tree.pop();
            var arg = tree.pop();
            f.args.push(arg);
            tree.push(f);
            return tree;
            },
        //[53] OptArgs -> name OptArgs 
        53:function(tree){
            var f = tree.pop();
            var arg = tree.pop();
            f.args.push(arg);
            tree.push(f);
            return tree;
            }
        };
    var productions_str = {
        0:{prod:"__",rside:[ "Lines"]},
        1:{prod:"Lines",rside:[ "Line","LinesOptEnd"]},
        2:{prod:"LinesOptEnd",rside:[]},
        3:{prod:"LinesOptEnd",rside:[ "dot"]},
        4:{prod:"LinesOptEnd",rside:[ "Lines"]},
        5:{prod:"LinesOptEnd",rside:[ "Naming","Lines"]},
        6:{prod:"LinesOptEnd",rside:[ "scolon","Naming","Lines"]},
        7:{prod:"Line",rside:[ "uscore"]},
        8:{prod:"Line",rside:[ "lpar","Box","rpar"]},
        9:{prod:"Line",rside:[ "Formula","Rule"]},
        10:{prod:"Rule",rside:[ "by","RuleApply"]},
        11:{prod:"Rule",rside:[ "assump"]},
        12:{prod:"Rule",rside:[ "prem"]},
        13:{prod:"Box",rside:[ "Lines"]},
        14:{prod:"Box",rside:[ "var","Naming","Lines"]},
        15:{prod:"RuleApply",rside:[ "copy","name"]},
        16:{prod:"RuleApply",rside:[ "eq_e","Bind","name","name"]},
        17:{prod:"RuleApply",rside:[ "eq_i"]},
        18:{prod:"RuleApply",rside:[ "exi_e","name","name"]},
        19:{prod:"RuleApply",rside:[ "exi_i","name","name"]},
        20:{prod:"RuleApply",rside:[ "all_e","name","name"]},
        21:{prod:"RuleApply",rside:[ "all_i","name"]},
        22:{prod:"RuleApply",rside:[ "mt","name","name"]},
        23:{prod:"RuleApply",rside:[ "pbc","name"]},
        24:{prod:"RuleApply",rside:[ "lem"]},
        25:{prod:"RuleApply",rside:[ "nni","name"]},
        26:{prod:"RuleApply",rside:[ "nne","name"]},
        27:{prod:"RuleApply",rside:[ "bot_e","name"]},
        28:{prod:"RuleApply",rside:[ "neg_e","name","name"]},
        29:{prod:"RuleApply",rside:[ "neg_i","name"]},
        30:{prod:"RuleApply",rside:[ "imp_e","name","name"]},
        31:{prod:"RuleApply",rside:[ "imp_i","name"]},
        32:{prod:"RuleApply",rside:[ "dis_e","name","name","name"]},
        33:{prod:"RuleApply",rside:[ "dis_i2","name"]},
        34:{prod:"RuleApply",rside:[ "dis_i1","name"]},
        35:{prod:"RuleApply",rside:[ "con_e2","name"]},
        36:{prod:"RuleApply",rside:[ "con_e1","name"]},
        37:{prod:"RuleApply",rside:[ "con_i","name","name"]},
        38:{prod:"RuleApply",rside:[ "top_i"]},
        39:{prod:"Naming",rside:[ "lbracket","name","rbracket"]},
        40:{prod:"Formula",rside:[ "Atom"]},
        41:{prod:"Formula",rside:[ "not","Formula"]},
        42:{prod:"Formula",rside:[ "exi","Bind"]},
        43:{prod:"Formula",rside:[ "all","Bind"]},
        44:{prod:"Formula",rside:[ "Formula","eq","Formula"]},
        45:{prod:"Formula",rside:[ "Formula","imp","Formula"]},
        46:{prod:"Formula",rside:[ "Formula","or","Formula"]},
        47:{prod:"Formula",rside:[ "Formula","and","Formula"]},
        48:{prod:"Bind",rside:[ "lpar","Naming","Formula","rpar"]},
        49:{prod:"Atom",rside:[ "name","OptArgs"]},
        50:{prod:"Atom",rside:[ "lpar","Formula","rpar"]},
        51:{prod:"OptArgs",rside:[]},
        52:{prod:"OptArgs",rside:[ "lpar","Formula","rpar","OptArgs"]},
        53:{prod:"OptArgs",rside:[ "name","OptArgs"]}
        };
    var lexer = function(inStr){
        var rxStr =
            "(\\/\\\\)|"+
            "(\\\\\\/)|"+
            "(=>|->)|"+
            "(~)|"+
            "(==|=)|"+
            "(premise;|premise)|"+
            "(assumption;|assumption)|"+
            "(all_e(?= ))|"+
            "(all_i(?= ))|"+
            "(bot_e(?= ))|"+
            "(con_e1(?= ))|"+
            "(con_e2(?= ))|"+
            "(con_i(?= ))|"+
            "(dis_e(?= ))|"+
            "(dis_i1(?= ))|"+
            "(dis_i2(?= ))|"+
            "(eq_e(?= ))|"+
            "(eq_i(?= ))|"+
            "(exi_e(?= ))|"+
            "(exi_i(?= ))|"+
            "(imp_e(?= ))|"+
            "(imp_i(?= ))|"+
            "(neg_e(?= ))|"+
            "(neg_i(?= ))|"+
            "(nne(?= ))|"+
            "(nni(?= ))|"+
            "(pbc(?= ))|"+
            "(top_i(?= ))|"+
            "(var(?= ))|"+
            "(all(?= ))|"+
            "(exi(?= ))|"+
            "(lem(?= ))|"+
            "(mt(?= ))|"+
            "(by(?= ))|"+
            "(copy(?= ))|"+
            "(\\()|"+
            "(\\))|"+
            "(\\[)|"+
            "(\\])|"+
            "(_)|"+
            "(;)|"+
            "(\\.)|"+
            "([a-zA-Z0-9@#\\-_',\\^\\\\]+|\"[^\"]*\")|"+
            "\n|"+
            "\r|"+
            "\t|"+
            " ";
        var rx = new RegExp(rxStr,"g");
        var retI = 0;
        var retval = {};
        var linepos = {lnr:1,start:0};
        var resStr = inStr.replace(rx,
            function(a,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,posX){
                if(a === "\n"){
                    linepos.lnr++;
                    linepos.start = posX;
                    }
                if(typeof i1 !== "undefined"){
                    retval[retI] = {t:"none",tt:"and",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i2 !== "undefined"){
                    retval[retI] = {t:"none",tt:"or",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i3 !== "undefined"){
                    retval[retI] = {t:"none",tt:"imp",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i4 !== "undefined"){
                    retval[retI] = {t:"none",tt:"not",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i5 !== "undefined"){
                    retval[retI] = {t:"none",tt:"eq",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i6 !== "undefined"){
                    retval[retI] = {t:"none",tt:"prem",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i7 !== "undefined"){
                    retval[retI] = {t:"none",tt:"assump",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i8 !== "undefined"){
                    retval[retI] = {t:"none",tt:"all_e",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i9 !== "undefined"){
                    retval[retI] = {t:"none",tt:"all_i",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i10 !== "undefined"){
                    retval[retI] = {t:"none",tt:"bot_e",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i11 !== "undefined"){
                    retval[retI] = {t:"none",tt:"con_e1",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i12 !== "undefined"){
                    retval[retI] = {t:"none",tt:"con_e2",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i13 !== "undefined"){
                    retval[retI] = {t:"none",tt:"con_i",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i14 !== "undefined"){
                    retval[retI] = {t:"none",tt:"dis_e",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i15 !== "undefined"){
                    retval[retI] = {t:"none",tt:"dis_i1",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i16 !== "undefined"){
                    retval[retI] = {t:"none",tt:"dis_i2",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i17 !== "undefined"){
                    retval[retI] = {t:"none",tt:"eq_e",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i18 !== "undefined"){
                    retval[retI] = {t:"none",tt:"eq_i",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i19 !== "undefined"){
                    retval[retI] = {t:"none",tt:"exi_e",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i20 !== "undefined"){
                    retval[retI] = {t:"none",tt:"exi_i",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i21 !== "undefined"){
                    retval[retI] = {t:"none",tt:"imp_e",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i22 !== "undefined"){
                    retval[retI] = {t:"none",tt:"imp_i",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i23 !== "undefined"){
                    retval[retI] = {t:"none",tt:"neg_e",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i24 !== "undefined"){
                    retval[retI] = {t:"none",tt:"neg_i",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i25 !== "undefined"){
                    retval[retI] = {t:"none",tt:"nne",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i26 !== "undefined"){
                    retval[retI] = {t:"none",tt:"nni",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i27 !== "undefined"){
                    retval[retI] = {t:"none",tt:"pbc",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i28 !== "undefined"){
                    retval[retI] = {t:"none",tt:"top_i",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i29 !== "undefined"){
                    retval[retI] = {t:"none",tt:"var",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i30 !== "undefined"){
                    retval[retI] = {t:"none",tt:"all",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i31 !== "undefined"){
                    retval[retI] = {t:"none",tt:"exi",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i32 !== "undefined"){
                    retval[retI] = {t:"none",tt:"lem",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i33 !== "undefined"){
                    retval[retI] = {t:"none",tt:"mt",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i34 !== "undefined"){
                    retval[retI] = {t:"none",tt:"by",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i35 !== "undefined"){
                    retval[retI] = {t:"none",tt:"copy",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i36 !== "undefined"){
                    retval[retI] = {t:"none",tt:"lpar",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i37 !== "undefined"){
                    retval[retI] = {t:"none",tt:"rpar",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i38 !== "undefined"){
                    retval[retI] = {t:"none",tt:"lbracket",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i39 !== "undefined"){
                    retval[retI] = {t:"none",tt:"rbracket",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i40 !== "undefined"){
                    retval[retI] = {t:"none",tt:"uscore",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i41 !== "undefined"){
                    retval[retI] = {t:"none",tt:"scolon",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i42 !== "undefined"){
                    retval[retI] = {t:"none",tt:"dot",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i43 !== "undefined"){
                    retval[retI] = {t:"some",tt:"name",tv:i43,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                return "";
                }
            );
        if(resStr !== ""){
            retval["__success"] = false;
            retval["__res"] = resStr[0];
            }
        else {
            retval[retI] = {t:"none",v:null,tt:"$",tv:null,posX:linepos.x - linepos.start,posY:linepos.lnr};
            }
        return retval;
        };
    var actionTable = {
        0:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(7),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.shift(10),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        1:{
            "and":actionType.reduce(40),
            "or":actionType.reduce(40),
            "imp":actionType.reduce(40),
            "not":actionType.error(),
            "eq":actionType.reduce(40),
            "prem":actionType.reduce(40),
            "assump":actionType.reduce(40),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(40),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(40),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        2:{
            "and":actionType.shift(12),
            "or":actionType.shift(17),
            "imp":actionType.shift(16),
            "not":actionType.error(),
            "eq":actionType.shift(15),
            "prem":actionType.shift(18),
            "assump":actionType.shift(13),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.shift(14),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        3:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(7),
            "rpar":actionType.reduce(2),
            "lbracket":actionType.shift(23),
            "rbracket":actionType.error(),
            "uscore":actionType.shift(10),
            "scolon":actionType.shift(24),
            "dot":actionType.shift(22),
            "name":actionType.shift(8),
            "$":actionType.reduce(2)
            },
        4:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.accept(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.accept()
            },
        5:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(26),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        6:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(26),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        7:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.shift(31),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(7),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.shift(10),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        8:{
            "and":actionType.reduce(51),
            "or":actionType.reduce(51),
            "imp":actionType.reduce(51),
            "not":actionType.error(),
            "eq":actionType.reduce(51),
            "prem":actionType.reduce(51),
            "assump":actionType.reduce(51),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(51),
            "copy":actionType.error(),
            "lpar":actionType.shift(33),
            "rpar":actionType.reduce(51),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(34),
            "$":actionType.error()
            },
        9:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(36),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        10:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(7),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(7),
            "exi":actionType.reduce(7),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(7),
            "rpar":actionType.reduce(7),
            "lbracket":actionType.reduce(7),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(7),
            "scolon":actionType.reduce(7),
            "dot":actionType.reduce(7),
            "name":actionType.reduce(7),
            "$":actionType.reduce(7)
            },
        11:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(9),
            "exi":actionType.reduce(9),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(9),
            "rpar":actionType.reduce(9),
            "lbracket":actionType.reduce(9),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(9),
            "scolon":actionType.reduce(9),
            "dot":actionType.reduce(9),
            "name":actionType.reduce(9),
            "$":actionType.reduce(9)
            },
        12:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(36),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        13:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(11),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(11),
            "exi":actionType.reduce(11),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(11),
            "rpar":actionType.reduce(11),
            "lbracket":actionType.reduce(11),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(11),
            "scolon":actionType.reduce(11),
            "dot":actionType.reduce(11),
            "name":actionType.reduce(11),
            "$":actionType.reduce(11)
            },
        14:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.shift(39),
            "all_i":actionType.shift(40),
            "bot_e":actionType.shift(41),
            "con_e1":actionType.shift(42),
            "con_e2":actionType.shift(43),
            "con_i":actionType.shift(44),
            "dis_e":actionType.shift(46),
            "dis_i1":actionType.shift(47),
            "dis_i2":actionType.shift(48),
            "eq_e":actionType.shift(49),
            "eq_i":actionType.shift(50),
            "exi_e":actionType.shift(51),
            "exi_i":actionType.shift(52),
            "imp_e":actionType.shift(53),
            "imp_i":actionType.shift(54),
            "neg_e":actionType.shift(57),
            "neg_i":actionType.shift(58),
            "nne":actionType.shift(59),
            "nni":actionType.shift(60),
            "pbc":actionType.shift(61),
            "top_i":actionType.shift(62),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.shift(55),
            "mt":actionType.shift(56),
            "by":actionType.error(),
            "copy":actionType.shift(45),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        15:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(36),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        16:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(36),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        17:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(36),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        18:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(12),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(12),
            "exi":actionType.reduce(12),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(12),
            "rpar":actionType.reduce(12),
            "lbracket":actionType.reduce(12),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(12),
            "scolon":actionType.reduce(12),
            "dot":actionType.reduce(12),
            "name":actionType.reduce(12),
            "$":actionType.reduce(12)
            },
        19:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(4),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.reduce(4)
            },
        20:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(1),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.reduce(1)
            },
        21:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(7),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.shift(10),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        22:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(3),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.reduce(3)
            },
        23:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(67),
            "$":actionType.error()
            },
        24:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.shift(23),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        25:{
            "and":actionType.reduce(43),
            "or":actionType.reduce(43),
            "imp":actionType.reduce(43),
            "not":actionType.error(),
            "eq":actionType.reduce(43),
            "prem":actionType.reduce(43),
            "assump":actionType.reduce(43),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(43),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(43),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        26:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.shift(23),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        27:{
            "and":actionType.reduce(42),
            "or":actionType.reduce(42),
            "imp":actionType.reduce(42),
            "not":actionType.error(),
            "eq":actionType.reduce(42),
            "prem":actionType.reduce(42),
            "assump":actionType.reduce(42),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(42),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(42),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        28:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.shift(70),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        29:{
            "and":actionType.shift(12),
            "or":actionType.shift(17),
            "imp":actionType.shift(16),
            "not":actionType.error(),
            "eq":actionType.shift(15),
            "prem":actionType.shift(18),
            "assump":actionType.shift(13),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.shift(14),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.shift(71),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        30:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(13),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        31:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.shift(23),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        32:{
            "and":actionType.reduce(49),
            "or":actionType.reduce(49),
            "imp":actionType.reduce(49),
            "not":actionType.error(),
            "eq":actionType.reduce(49),
            "prem":actionType.reduce(49),
            "assump":actionType.reduce(49),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(49),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(49),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        33:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(36),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        34:{
            "and":actionType.reduce(51),
            "or":actionType.reduce(51),
            "imp":actionType.reduce(51),
            "not":actionType.error(),
            "eq":actionType.reduce(51),
            "prem":actionType.reduce(51),
            "assump":actionType.reduce(51),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(51),
            "copy":actionType.error(),
            "lpar":actionType.shift(33),
            "rpar":actionType.reduce(51),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(34),
            "$":actionType.error()
            },
        35:{
            "and":actionType.reduce(41),
            "or":actionType.reduce(41),
            "imp":actionType.reduce(41),
            "not":actionType.error(),
            "eq":actionType.reduce(41),
            "prem":actionType.reduce(41),
            "assump":actionType.reduce(41),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(41),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(41),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        36:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(36),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        37:{
            "and":actionType.reduce(47),
            "or":actionType.reduce(47),
            "imp":actionType.reduce(47),
            "not":actionType.error(),
            "eq":actionType.shift(15),
            "prem":actionType.reduce(47),
            "assump":actionType.reduce(47),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(47),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(47),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        38:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(10),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(10),
            "exi":actionType.reduce(10),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(10),
            "rpar":actionType.reduce(10),
            "lbracket":actionType.reduce(10),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(10),
            "scolon":actionType.reduce(10),
            "dot":actionType.reduce(10),
            "name":actionType.reduce(10),
            "$":actionType.reduce(10)
            },
        39:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(76),
            "$":actionType.error()
            },
        40:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(77),
            "$":actionType.error()
            },
        41:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(78),
            "$":actionType.error()
            },
        42:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(79),
            "$":actionType.error()
            },
        43:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(80),
            "$":actionType.error()
            },
        44:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(81),
            "$":actionType.error()
            },
        45:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(82),
            "$":actionType.error()
            },
        46:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(83),
            "$":actionType.error()
            },
        47:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(84),
            "$":actionType.error()
            },
        48:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(85),
            "$":actionType.error()
            },
        49:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(26),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        50:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(17),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(17),
            "exi":actionType.reduce(17),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(17),
            "rpar":actionType.reduce(17),
            "lbracket":actionType.reduce(17),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(17),
            "scolon":actionType.reduce(17),
            "dot":actionType.reduce(17),
            "name":actionType.reduce(17),
            "$":actionType.reduce(17)
            },
        51:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(87),
            "$":actionType.error()
            },
        52:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(88),
            "$":actionType.error()
            },
        53:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(89),
            "$":actionType.error()
            },
        54:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(90),
            "$":actionType.error()
            },
        55:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(24),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(24),
            "exi":actionType.reduce(24),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(24),
            "rpar":actionType.reduce(24),
            "lbracket":actionType.reduce(24),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(24),
            "scolon":actionType.reduce(24),
            "dot":actionType.reduce(24),
            "name":actionType.reduce(24),
            "$":actionType.reduce(24)
            },
        56:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(91),
            "$":actionType.error()
            },
        57:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(92),
            "$":actionType.error()
            },
        58:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(93),
            "$":actionType.error()
            },
        59:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(94),
            "$":actionType.error()
            },
        60:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(95),
            "$":actionType.error()
            },
        61:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(96),
            "$":actionType.error()
            },
        62:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(38),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(38),
            "exi":actionType.reduce(38),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(38),
            "rpar":actionType.reduce(38),
            "lbracket":actionType.reduce(38),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(38),
            "scolon":actionType.reduce(38),
            "dot":actionType.reduce(38),
            "name":actionType.reduce(38),
            "$":actionType.reduce(38)
            },
        63:{
            "and":actionType.reduce(44),
            "or":actionType.reduce(44),
            "imp":actionType.reduce(44),
            "not":actionType.error(),
            "eq":actionType.reduce(44),
            "prem":actionType.reduce(44),
            "assump":actionType.reduce(44),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(44),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(44),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        64:{
            "and":actionType.shift(12),
            "or":actionType.shift(17),
            "imp":actionType.shift(16),
            "not":actionType.error(),
            "eq":actionType.shift(15),
            "prem":actionType.reduce(45),
            "assump":actionType.reduce(45),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(45),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(45),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        65:{
            "and":actionType.shift(12),
            "or":actionType.reduce(46),
            "imp":actionType.reduce(46),
            "not":actionType.error(),
            "eq":actionType.shift(15),
            "prem":actionType.reduce(46),
            "assump":actionType.reduce(46),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(46),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(46),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        66:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(5),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.reduce(5)
            },
        67:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.shift(97),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        68:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(7),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.shift(10),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        69:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(36),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        70:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(8),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(8),
            "exi":actionType.reduce(8),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(8),
            "rpar":actionType.reduce(8),
            "lbracket":actionType.reduce(8),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(8),
            "scolon":actionType.reduce(8),
            "dot":actionType.reduce(8),
            "name":actionType.reduce(8),
            "$":actionType.reduce(8)
            },
        71:{
            "and":actionType.reduce(50),
            "or":actionType.reduce(50),
            "imp":actionType.reduce(50),
            "not":actionType.error(),
            "eq":actionType.reduce(50),
            "prem":actionType.reduce(50),
            "assump":actionType.reduce(50),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(50),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(50),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        72:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.shift(9),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.shift(5),
            "exi":actionType.shift(6),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.shift(7),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.shift(10),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(8),
            "$":actionType.error()
            },
        73:{
            "and":actionType.shift(12),
            "or":actionType.shift(17),
            "imp":actionType.shift(16),
            "not":actionType.error(),
            "eq":actionType.shift(15),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.shift(101),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        74:{
            "and":actionType.reduce(53),
            "or":actionType.reduce(53),
            "imp":actionType.reduce(53),
            "not":actionType.error(),
            "eq":actionType.reduce(53),
            "prem":actionType.reduce(53),
            "assump":actionType.reduce(53),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(53),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(53),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        75:{
            "and":actionType.shift(12),
            "or":actionType.shift(17),
            "imp":actionType.shift(16),
            "not":actionType.error(),
            "eq":actionType.shift(15),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.shift(71),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        76:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(102),
            "$":actionType.error()
            },
        77:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(21),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(21),
            "exi":actionType.reduce(21),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(21),
            "rpar":actionType.reduce(21),
            "lbracket":actionType.reduce(21),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(21),
            "scolon":actionType.reduce(21),
            "dot":actionType.reduce(21),
            "name":actionType.reduce(21),
            "$":actionType.reduce(21)
            },
        78:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(27),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(27),
            "exi":actionType.reduce(27),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(27),
            "rpar":actionType.reduce(27),
            "lbracket":actionType.reduce(27),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(27),
            "scolon":actionType.reduce(27),
            "dot":actionType.reduce(27),
            "name":actionType.reduce(27),
            "$":actionType.reduce(27)
            },
        79:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(36),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(36),
            "exi":actionType.reduce(36),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(36),
            "rpar":actionType.reduce(36),
            "lbracket":actionType.reduce(36),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(36),
            "scolon":actionType.reduce(36),
            "dot":actionType.reduce(36),
            "name":actionType.reduce(36),
            "$":actionType.reduce(36)
            },
        80:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(35),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(35),
            "exi":actionType.reduce(35),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(35),
            "rpar":actionType.reduce(35),
            "lbracket":actionType.reduce(35),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(35),
            "scolon":actionType.reduce(35),
            "dot":actionType.reduce(35),
            "name":actionType.reduce(35),
            "$":actionType.reduce(35)
            },
        81:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(103),
            "$":actionType.error()
            },
        82:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(15),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(15),
            "exi":actionType.reduce(15),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(15),
            "rpar":actionType.reduce(15),
            "lbracket":actionType.reduce(15),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(15),
            "scolon":actionType.reduce(15),
            "dot":actionType.reduce(15),
            "name":actionType.reduce(15),
            "$":actionType.reduce(15)
            },
        83:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(104),
            "$":actionType.error()
            },
        84:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(34),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(34),
            "exi":actionType.reduce(34),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(34),
            "rpar":actionType.reduce(34),
            "lbracket":actionType.reduce(34),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(34),
            "scolon":actionType.reduce(34),
            "dot":actionType.reduce(34),
            "name":actionType.reduce(34),
            "$":actionType.reduce(34)
            },
        85:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(33),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(33),
            "exi":actionType.reduce(33),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(33),
            "rpar":actionType.reduce(33),
            "lbracket":actionType.reduce(33),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(33),
            "scolon":actionType.reduce(33),
            "dot":actionType.reduce(33),
            "name":actionType.reduce(33),
            "$":actionType.reduce(33)
            },
        86:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(105),
            "$":actionType.error()
            },
        87:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(106),
            "$":actionType.error()
            },
        88:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(107),
            "$":actionType.error()
            },
        89:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(108),
            "$":actionType.error()
            },
        90:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(31),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(31),
            "exi":actionType.reduce(31),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(31),
            "rpar":actionType.reduce(31),
            "lbracket":actionType.reduce(31),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(31),
            "scolon":actionType.reduce(31),
            "dot":actionType.reduce(31),
            "name":actionType.reduce(31),
            "$":actionType.reduce(31)
            },
        91:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(109),
            "$":actionType.error()
            },
        92:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(110),
            "$":actionType.error()
            },
        93:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(29),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(29),
            "exi":actionType.reduce(29),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(29),
            "rpar":actionType.reduce(29),
            "lbracket":actionType.reduce(29),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(29),
            "scolon":actionType.reduce(29),
            "dot":actionType.reduce(29),
            "name":actionType.reduce(29),
            "$":actionType.reduce(29)
            },
        94:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(26),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(26),
            "exi":actionType.reduce(26),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(26),
            "rpar":actionType.reduce(26),
            "lbracket":actionType.reduce(26),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(26),
            "scolon":actionType.reduce(26),
            "dot":actionType.reduce(26),
            "name":actionType.reduce(26),
            "$":actionType.reduce(26)
            },
        95:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(25),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(25),
            "exi":actionType.reduce(25),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(25),
            "rpar":actionType.reduce(25),
            "lbracket":actionType.reduce(25),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(25),
            "scolon":actionType.reduce(25),
            "dot":actionType.reduce(25),
            "name":actionType.reduce(25),
            "$":actionType.reduce(25)
            },
        96:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(23),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(23),
            "exi":actionType.reduce(23),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(23),
            "rpar":actionType.reduce(23),
            "lbracket":actionType.reduce(23),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(23),
            "scolon":actionType.reduce(23),
            "dot":actionType.reduce(23),
            "name":actionType.reduce(23),
            "$":actionType.reduce(23)
            },
        97:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(39),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(39),
            "exi":actionType.reduce(39),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(39),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(39),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.reduce(39),
            "$":actionType.error()
            },
        98:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(6),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.reduce(6)
            },
        99:{
            "and":actionType.shift(12),
            "or":actionType.shift(17),
            "imp":actionType.shift(16),
            "not":actionType.error(),
            "eq":actionType.shift(15),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.shift(111),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        100:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(14),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        101:{
            "and":actionType.reduce(51),
            "or":actionType.reduce(51),
            "imp":actionType.reduce(51),
            "not":actionType.error(),
            "eq":actionType.reduce(51),
            "prem":actionType.reduce(51),
            "assump":actionType.reduce(51),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(51),
            "copy":actionType.error(),
            "lpar":actionType.shift(33),
            "rpar":actionType.reduce(51),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(34),
            "$":actionType.error()
            },
        102:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(20),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(20),
            "exi":actionType.reduce(20),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(20),
            "rpar":actionType.reduce(20),
            "lbracket":actionType.reduce(20),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(20),
            "scolon":actionType.reduce(20),
            "dot":actionType.reduce(20),
            "name":actionType.reduce(20),
            "$":actionType.reduce(20)
            },
        103:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(37),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(37),
            "exi":actionType.reduce(37),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(37),
            "rpar":actionType.reduce(37),
            "lbracket":actionType.reduce(37),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(37),
            "scolon":actionType.reduce(37),
            "dot":actionType.reduce(37),
            "name":actionType.reduce(37),
            "$":actionType.reduce(37)
            },
        104:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(113),
            "$":actionType.error()
            },
        105:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.error(),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.error(),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.shift(114),
            "$":actionType.error()
            },
        106:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(18),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(18),
            "exi":actionType.reduce(18),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(18),
            "rpar":actionType.reduce(18),
            "lbracket":actionType.reduce(18),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(18),
            "scolon":actionType.reduce(18),
            "dot":actionType.reduce(18),
            "name":actionType.reduce(18),
            "$":actionType.reduce(18)
            },
        107:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(19),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(19),
            "exi":actionType.reduce(19),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(19),
            "rpar":actionType.reduce(19),
            "lbracket":actionType.reduce(19),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(19),
            "scolon":actionType.reduce(19),
            "dot":actionType.reduce(19),
            "name":actionType.reduce(19),
            "$":actionType.reduce(19)
            },
        108:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(30),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(30),
            "exi":actionType.reduce(30),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(30),
            "rpar":actionType.reduce(30),
            "lbracket":actionType.reduce(30),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(30),
            "scolon":actionType.reduce(30),
            "dot":actionType.reduce(30),
            "name":actionType.reduce(30),
            "$":actionType.reduce(30)
            },
        109:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(22),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(22),
            "exi":actionType.reduce(22),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(22),
            "rpar":actionType.reduce(22),
            "lbracket":actionType.reduce(22),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(22),
            "scolon":actionType.reduce(22),
            "dot":actionType.reduce(22),
            "name":actionType.reduce(22),
            "$":actionType.reduce(22)
            },
        110:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(28),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(28),
            "exi":actionType.reduce(28),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(28),
            "rpar":actionType.reduce(28),
            "lbracket":actionType.reduce(28),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(28),
            "scolon":actionType.reduce(28),
            "dot":actionType.reduce(28),
            "name":actionType.reduce(28),
            "$":actionType.reduce(28)
            },
        111:{
            "and":actionType.reduce(48),
            "or":actionType.reduce(48),
            "imp":actionType.reduce(48),
            "not":actionType.error(),
            "eq":actionType.reduce(48),
            "prem":actionType.reduce(48),
            "assump":actionType.reduce(48),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(48),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(48),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.reduce(48),
            "$":actionType.error()
            },
        112:{
            "and":actionType.reduce(52),
            "or":actionType.reduce(52),
            "imp":actionType.reduce(52),
            "not":actionType.error(),
            "eq":actionType.reduce(52),
            "prem":actionType.reduce(52),
            "assump":actionType.reduce(52),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.error(),
            "exi":actionType.error(),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.reduce(52),
            "copy":actionType.error(),
            "lpar":actionType.error(),
            "rpar":actionType.reduce(52),
            "lbracket":actionType.error(),
            "rbracket":actionType.error(),
            "uscore":actionType.error(),
            "scolon":actionType.error(),
            "dot":actionType.error(),
            "name":actionType.error(),
            "$":actionType.error()
            },
        113:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(32),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(32),
            "exi":actionType.reduce(32),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(32),
            "rpar":actionType.reduce(32),
            "lbracket":actionType.reduce(32),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(32),
            "scolon":actionType.reduce(32),
            "dot":actionType.reduce(32),
            "name":actionType.reduce(32),
            "$":actionType.reduce(32)
            },
        114:{
            "and":actionType.error(),
            "or":actionType.error(),
            "imp":actionType.error(),
            "not":actionType.reduce(16),
            "eq":actionType.error(),
            "prem":actionType.error(),
            "assump":actionType.error(),
            "all_e":actionType.error(),
            "all_i":actionType.error(),
            "bot_e":actionType.error(),
            "con_e1":actionType.error(),
            "con_e2":actionType.error(),
            "con_i":actionType.error(),
            "dis_e":actionType.error(),
            "dis_i1":actionType.error(),
            "dis_i2":actionType.error(),
            "eq_e":actionType.error(),
            "eq_i":actionType.error(),
            "exi_e":actionType.error(),
            "exi_i":actionType.error(),
            "imp_e":actionType.error(),
            "imp_i":actionType.error(),
            "neg_e":actionType.error(),
            "neg_i":actionType.error(),
            "nne":actionType.error(),
            "nni":actionType.error(),
            "pbc":actionType.error(),
            "top_i":actionType.error(),
            "var":actionType.error(),
            "all":actionType.reduce(16),
            "exi":actionType.reduce(16),
            "lem":actionType.error(),
            "mt":actionType.error(),
            "by":actionType.error(),
            "copy":actionType.error(),
            "lpar":actionType.reduce(16),
            "rpar":actionType.reduce(16),
            "lbracket":actionType.reduce(16),
            "rbracket":actionType.error(),
            "uscore":actionType.reduce(16),
            "scolon":actionType.reduce(16),
            "dot":actionType.reduce(16),
            "name":actionType.reduce(16),
            "$":actionType.reduce(16)
            }
        };
    var gotoTable = {
        0:{
            "Lines":actionType.some(4),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.some(3),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(2),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        1:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        2:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.some(11),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        3:{
            "Lines":actionType.some(19),
            "LinesOptEnd":actionType.some(20),
            "Line":actionType.some(3),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.some(21),
            "Formula":actionType.some(2),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        4:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        5:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.some(25),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        6:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.some(27),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        7:{
            "Lines":actionType.some(30),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.some(3),
            "Rule":actionType.none(),
            "Box":actionType.some(28),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(29),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        8:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.some(32)
            },
        9:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(35),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        10:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        11:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        12:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(37),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        13:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        14:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.some(38),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        15:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(63),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        16:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(64),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        17:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(65),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        18:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        19:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        20:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        21:{
            "Lines":actionType.some(66),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.some(3),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(2),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        22:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        23:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        24:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.some(68),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        25:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        26:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.some(69),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        27:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        28:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        29:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.some(11),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        30:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        31:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.some(72),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        32:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        33:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(73),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        34:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.some(74)
            },
        35:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        36:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(75),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        37:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        38:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        39:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        40:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        41:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        42:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        43:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        44:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        45:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        46:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        47:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        48:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        49:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.some(86),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        50:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        51:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        52:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        53:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        54:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        55:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        56:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        57:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        58:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        59:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        60:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        61:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        62:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        63:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        64:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        65:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        66:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        67:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        68:{
            "Lines":actionType.some(98),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.some(3),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(2),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        69:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(99),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        70:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        71:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        72:{
            "Lines":actionType.some(100),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.some(3),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.some(2),
            "Bind":actionType.none(),
            "Atom":actionType.some(1),
            "OptArgs":actionType.none()
            },
        73:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        74:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        75:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        76:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        77:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        78:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        79:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        80:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        81:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        82:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        83:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        84:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        85:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        86:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        87:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        88:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        89:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        90:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        91:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        92:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        93:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        94:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        95:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        96:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        97:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        98:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        99:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        100:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        101:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.some(112)
            },
        102:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        103:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        104:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        105:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        106:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        107:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        108:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        109:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        110:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        111:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        112:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        113:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            },
        114:{
            "Lines":actionType.none(),
            "LinesOptEnd":actionType.none(),
            "Line":actionType.none(),
            "Rule":actionType.none(),
            "Box":actionType.none(),
            "RuleApply":actionType.none(),
            "Naming":actionType.none(),
            "Formula":actionType.none(),
            "Bind":actionType.none(),
            "Atom":actionType.none(),
            "OptArgs":actionType.none()
            }
        };
    var parser = function(tokens){
        var sStack = new Stack();
        var tree = new Stack();
        //var scope = {lines:[],bindings:{}};
        var i = 0;
        var parsing = true;
        if(tokens["__success"] !== undefined && !tokens["__success"]){
            return {
                error:true,
                error_msg:errors.garbage(tokens["__res"]),
                tree:tree
                };
            }
        sStack.push(0);
        tree.push({type:"lines",lines:[]});
        while(parsing){
            var s = sStack.peek();
            var a = tokens[i].tt;
            var entry = actionTable[s][a];
            switch(entry.type){
                case "shift":
                    sStack.push(entry.v);
                    tree = addToken2tree(tree,tokens[i]);
                    i += 1;
                    break;
                case "reduce":
                    var r = entry.v;
                    var prod = productions_str[r];
                    var rSide = prod.rside;
                    var pName = prod.prod;
                    var pFun = productions_fun[r];
                    sStack.popN(rSide.length,function(x){});
                    sStack.push(gotoTable[sStack.peek()][pName].v);
                    tree = pFun(tree);
                    break;
                case "accept":
                    var lines = tree.pop();
                    return {error:false,lines:lines};
                case "error":
                    var token = tokens[i];
                    return {
                        error:true,
                        error_msg:errors.syntax({x:token.posX,y:token.posY},""),
                        tree:tree
                        };
                }
            }
        };
    /* The non-parser part of the program begins here
     * */

    /* General write functions. To be used with both latex and html
     * */
    var writeTerm = function(mapName,mapSyms,term){
        if(term.name === "bot" || term.name === "top"){
            //might check args
            return mapSyms(term.name);
            }
        var retval = mapName(term.name);
        if(term.args.length === 0){
            return retval;
            }
        var args = "";
        //turn around to match correct order of args
        for(var i = term.args.length - 1; i >= 0; i--){
            var arg = term.args[i];
            if(arg.type === "atom"){
                args += writeTerm(mapName,mapSyms,arg) + ",";
                continue;
                }
            args += mapName(term.args[i].v) + ",";
            }
        retval += "("+args.substr(0,args.length - 1)+")";
        return retval;
        };
    var writeConnective = function(mapName,mapSyms,form){
        if(form.args.length === 2){
            return (
                mapName(writeFormula(mapName,mapSyms)(form.args[0])) +
                mapSyms(form.name) +
                mapName(writeFormula(mapName,mapSyms)(form.args[1]))
                );
            }
        return mapSyms(form.name) + writeFormula(mapName,mapSyms)(form.args[0]);
        };
    var writeQuant = function(mapName,mapSyms,form){
        var q = mapSyms(form.name);
        var bvar = form.bvar;
        var arg = writeFormula(mapName,mapSyms)(form.args[0]);
        return q + mapName(bvar) + ".(" + arg + ")";
        };
    var writeFormula = function(mapName,mapSyms){
        return function(form){
            var retval = "";
            switch(form.type){
                case "hole":
                    retval = "...";
                    break;
                case "connective":
                    retval = writeConnective(mapName,mapSyms,form);
                    break;
                case "quant":
                    retval = writeQuant(mapName,mapSyms,form);
                    break;
                case "atom":
                    retval = writeTerm(mapName,mapSyms,form);
                    break;
                case "par":
                    retval = "("+writeFormula(mapName,mapSyms)(form.args[0])+")";
                    break;
                }
            return retval;
            };
        };
    var html = {
        mapSyms:function(v){
            var map = {
                "not":"&not;",
                "neg":"&not;",
                "and":"&and;",
                "con":"&and;",
                "or":"&or;",
                "dis":"&or;",
                "eq":"=",
                "imp":"&rarr;",
                "all":"&forall;",
                "exi":"&exist;",
                "top":"&#8868;",
                "bot":"&#8869;",
                "nn":"&not;&not;"
                };
            if(map[v] !== undefined){
                return map[v];
                }
            return v;
            },
        mapName:function(v){
            return v.replace(/\^([a-zA-Z@#0-9]+)|_([a-zA-Z@#0-9]+)|\\([a-zA-Z]+)/g,
                function(x,a,b,c){
                    if(a !== undefined){
                        return "<sup style='font-size:10pt;'>"+a+"</sup>";
                        }
                    if(b !== undefined){
                        return "<sub style='font-size:10pt;'>"+b+"</sub>";
                        }
                    return "&"+c+";";
                    }
                );
            },
        writeRule:function(rule){
            var that = this;
            if(rule.name === "hole"){
                return "";
                }
            var name = function(){
                if(rule.name === undefined){
                    return "no-name";
                    }
                if(rule.name.length === 1){
                    return that.mapSyms(rule.name[0]);
                    }
                if(rule.name.length === 2){
                    return that.mapSyms(rule.name[0]) + rule.name[1];
                    }
                return that.mapSyms(rule.name[0])+rule.name[1]+"<sub style='font-size:10pt;'>"+rule.name[2]+"</sub>";
                }();
            var args = function(){
                var retval = "";
                if(rule.name === undefined){
                    return rule.v;
                    }
                if(rule.args === undefined){
                    return retval;
                    }
                for(var i = 0; i < rule.args.length; i++){
                    var arg = rule.args[i];
                    var argV = traverseScope(traverse_bindings,arg.v);
                    if(argV === null){
                        argV = that.mapName(arg.v);
                    }
                    retval += argV + " ";
                    }
                return retval;
                }();
            return name + " " + args;
            },
        writeFormula:function(form){
            return writeFormula(this.mapName,this.mapSyms)(form);
            },
        newContainer:function(kode,c,content){
            var newButton = function(navn,f){
                var k = document.createElement("button");
                k.style.border = "0px";
                k.style.borderRight = "2px solid black";
                k.style.backgroundColor = "#424242";
                k.style.color = "#58FA58";
                k.style.fontSize = "11pt";
                k.innerHTML = navn;
                k.onclick = f;
                return k;
                };
            var menu = document.createElement("span");
            c.style.display = "block";
            c.style.marginTop = "10px";
            c.style.marginBottom = "10px";
            menu.style.display = "block";
            menu.style.borderTop = "2px solid #585858";
            menu.style.borderBottom = "2px solid #585858";
            menu.style.backgroundColor = "#1C1C1C";
            menu.style.textAlign = "left";
            menu.appendChild(newButton("copy to cb",function(){
                var c = null;
                return function(){
                    if(c === null){
                        c = document.createElement("textarea");
                        c.style.display = "none";
                        c.style.position = "fixed";
                        c.style.left = "-9999px";
                        c.value = kode;
                        document.body.appendChild(c);
                        }
                    c.style.display = "block";
                    c.select();
                    document.execCommand("copy");
                    c.style.display = "none";
                    };
                }()));
            menu.appendChild(newButton("send to raw",function(){
                var w = window.open("","Raw text of proof for use with https://boxprover.utr.dk/index.html");
                var tbox = w.document.createElement("textarea");
                tbox.style.width = (window.innerWidth - 40).toString() + "px";
                tbox.style.height = (window.innerHeight - 40).toString() + "px";
                tbox.style.backgroundColor = "white";
                tbox.style.color = "black";
                tbox.innerHTML = kode;
                w.document.body.style.whiteSpace = "pre";
                w.document.body.style.fontFamily = "monospace";
                w.document.body.style.textAlign = "center";
                w.document.body.appendChild(tbox);
                }));
            menu.appendChild(newButton("send to latex",function(){
                var w = window.open("","Latex code to use with boxproof.sty");
                var lcode = pub.createBoxLatex(w,kode);
                var tbox = w.document.createElement("textarea");
                tbox.style.width = (window.innerWidth - 40).toString() + "px";
                tbox.style.height = (window.innerHeight - 40).toString() + "px";
                tbox.style.backgroundColor = "white";
                tbox.style.color = "black";
                tbox.innerHTML = lcode;
                w.document.body.style.whiteSpace = "pre";
                w.document.body.style.fontFamily = "monospace";
                w.document.body.style.textAlign = "center";
                w.document.body.appendChild(tbox);
                }));
            menu.appendChild(newButton("about",function(){
                window.open("http://brkmnd.com/pages/projects/Default.aspx?id=29","_blank");
                }));
            c.appendChild(menu);
            c.appendChild(content);
            return c;
            },
        newBox:function(boxvar,lnr){
            var k = document.createElement("span");
            k.style.display = "block";
            k.style.position = "relative";
            k.style.marginTop = "3px";
            k.style.marginBottom = "3px";
            k.style.borderTop = "2px solid #585858";
            k.style.borderBottom = "2px solid #585858";
            k.style.borderRight = "2px solid #585858";
            k.style.fontFamily = "cmodern_regular";
            k.style.fontSize = "15pt";
            k.style.backgroundColor = "#1C1C1C";
            k.style.boxShadow = "3px 3px 5px black";
            if(boxvar !== ""){
                k.appendChild(this.newLineVar(this.mapName(boxvar)));
                }
            return k;
            },
        newError:function(kode,c,msg){
            var k = this.newBox("",0);
            var ek = document.createElement("span");
            ek.style.display = "block";
            ek.style.margin = "20px";
            ek.style.fontSize = "18pt";
            ek.style.color = "red";
            ek.style.textAlign = "center";
            ek.innerHTML = msg;
            k.appendChild(ek);
            return this.newContainer(kode,c,k);
            },
        newLine2:function(c,lnrv,vv,hv){
            var l = document.createElement("span");
            var v = document.createElement("span");
            var h = document.createElement("span");
            var lnr = document.createElement("span");
            l.innerHTML = "&nbsp;";
            l.style.display = "block";
            l.style.position = "relative";
            l.style.height = "28px";
            l.style.color = c;
            lnr.style.position = "absolute";
            lnr.style.top = "0px";
            lnr.style.left = "2px";
            lnr.style.color =  "#A4A4A4";
            lnr.innerHTML = lnrv.toString() + ".";
            v.style.position = "absolute";
            v.style.left = "42px";
            v.style.top = "0px";
            v.style.textAlign = "left";
            v.innerHTML = vv;
            h.style.position = "absolute";
            h.style.right = "2px";
            h.style.top = "0px";
            h.style.width = "250px";
            h.style.textAlign = "left";
            h.innerHTML = hv;
            l.appendChild(lnr);
            l.appendChild(v);
            l.appendChild(h);
            return l;
            },
        newLineGoal:function(tekst){
            var l = document.createElement("span");
            l.style.display = "block";
            l.style.height = "28px";
            l.style.color = "#F5A9A9";
            l.style.textAlign = "center";
            l.innerHTML = tekst;
            return l;
            },
        newLineVar:function(v){
            var l = document.createElement("span");
            l.style.display = "block";
            l.style.position = "relative";
            l.style.height = "28px";
            l.style.color = "#BDBDBD";
            l.style.textAlign = "left";
            l.style.marginLeft = "25px";
            l.innerHTML = v;
            return l;
            },
        newLine2Gray:function(lnr,vv,hv){
            return this.newLine2("#BDBDBD",lnr,vv,hv);
            },
        newLine2White:function(lnr,vv,hv){
            return this.newLine2("#FFFFFF",lnr,vv,hv);
            }
        };
    /* Latex part
     * */
    var latex = {
        mapSyms:function(v){
            var map = {
                "not":"\\neg",
                "neg":"\\neg",
                "and":"\\land",
                "con":"\\land",
                "or":"\\lor",
                "dis":"\\lor",
                "eq":"=",
                "imp":"\\rightarrow",
                "all":"\\forall",
                "exi":"\\exists",
                "top":"\\top",
                "bot":"\\bot",
                "nn":"\\neg\\neg"
                };
            if(map[v] !== undefined){
                return map[v] + " ";
                }
            return v + " ";
            },
        mapName:function(n){
            return n.replace(" ","\\ ") +" ";
            },
        writeRule:function(rule){
            var that = this;
            var mapRule = function(r){
                if(r === "i"){
                    return "\\intro";
                    }
                return "\\elim";
                };
            if(rule.name === "hole"){
                return "";
                }
            var name = function(){
                if(rule.name === undefined){
                    return "no-name";
                    }
                if(rule.name.length === 1){
                    return that.mapSyms(rule.name[0]);
                    }
                if(rule.name.length === 2){
                    return mapRule(rule.name[1]) + that.mapSyms(rule.name[0]);
                    }
                return that.mapSyms(rule.name[0])+rule.name[1]+"\\ "+rule.name[2];
                }();
            var args = function(){
                var retval = "";
                if(rule.name === undefined){
                    return rule.v;
                    }
                if(rule.args === undefined){
                    return retval;
                    }
                for(var i = 0; i < rule.args.length; i++){
                    var arg = rule.args[i];
                    var argV = traverseScope(traverse_bindings,arg.v);
                    if(argV === null){
                        argV = that.mapName(arg.v);
                    }
                    retval += argV+",";
                    }
                return retval.substr(0,retval.length - 1);
                }();
            return name+"\\ "+args;
            },
        writeFormula:function(form){
            return writeFormula(function(x){return x + " ";},this.mapSyms)(form);
            },
        newContainer:function(code,c,content){
            return c;
            },
        newBox:function(boxvar,lnr){
            var retval = {};
            var cont = "";
            retval.toString = function(){
                if(lnr === 1){
                    return "\\begin{proofbox}\n"+cont+"\\end{proofbox}";
                    }
                if(boxvar !== null && boxvar !== ""){
                    cont = boxvar + cont;
                    boxvar = null;
                    }
                return "\\(\n"+cont+"\\)";
                };
            retval.appendChild = function(c){
                var str = c.toString();
                if(str !== ""){
                    cont += str + "\n";
                    }
                };
            return retval;
            },
        newError:function(kode,c,msg){
            var retval = {};
            retval.toString = function(){
                return msg;
                };
            return retval;
            },
        newLine2:function(c,lnrv,leftV,rightV){
            var retval = {type:"line"};
            //treat leftV as formula, that is $leftV$
            var cont = "\\:" + leftV + "\\=" + rightV + "\\\\";
            retval.toString = function(){
                return cont;
                };
            return retval;
            },
        newLineGoal:function(tekst){
            var retval = {};
            retval.toString = function(){
                return "";
                };
            return retval;
            },
        newLine2White:function(lnr,vv,hv){
            return this.newLine2("#FFFFFF",lnr,vv,hv);
            }
        };
    /* General traversing
     * */
    //global state/side effect targets
    //makes use of hoisting
    var traverse_lnr = 1;
    var traverse_bindings = {};
    //traverse functions
    var traverseScope = function(s,n){
        if(s[n] !== undefined){
            return s[n];
            }
        if(s[".."] !== undefined){
            return traverseScope(s[".."],n);
            }
        return null;
        };
    var traverseLines = function(obj,bvar,goal,lines){
        var retval = obj.newBox(bvar,traverse_lnr);
        /*
        if(bvar !== ""){
            retval.appendChild(obj.newLine2Gray(traverse_lnr,obj.mapName(bvar),"variable"));
            traverse_lnr++;
        }
        */
        if(traverse_lnr === 1){
            goal.elm = obj.newLineGoal("");
            retval.appendChild(goal.elm);
        }
        for(var i = lines.length - 1; i >= 0; i--){
            var line = lines[i];
            var nameStr = line.name;
            if(line.type === "box"){
                var s0 = {"..":traverse_bindings};
                traverse_bindings[nameStr] = traverse_lnr.toString();
                traverse_bindings = s0;
                retval.appendChild(traverseLines(obj,line.bvar,goal,line.lines));
                traverse_bindings = traverse_bindings[".."];
                traverse_bindings[nameStr] += "-" + (traverse_lnr - 1).toString();
                continue;
                }
            var formStr = obj.writeFormula(line.formula);
            var ruleStr = obj.writeRule(line.rule);
            if(nameStr !== " "){
                traverse_bindings[nameStr] = traverse_lnr.toString();
                }
            if(ruleStr === "premise "){
                goal.prems.push(formStr);
            }
            goal.conc = formStr;
            retval.appendChild(obj.newLine2White(traverse_lnr,formStr,ruleStr));
            traverse_lnr++;
            }
        return retval;
        };
    var pub = {};
    pub.createBoxHtml = function(c,ind){
        var c = c || document.createElement("span");
        var goal = {prems:[],conc:"",elm:null};
        var ind = ind.replace(/&gt;|&lt;/g,function(x){
            if(x === "&gt;"){
                return ">";
                }
            return "<";
            });
        var tokens = lexer(ind);
        var absyn = parser(tokens);
        if(absyn.error){
            return html.newError(ind,c,absyn.error_msg);
            }
        traverse_lnr = 1;
        traverse_bindings = {};
        html.newContainer(ind,c,traverseLines(html,"",goal,absyn.lines.lines));
        for(var i = 0; i < goal.prems.length; i++){
            var prem = goal.prems[i];
            goal.elm.innerHTML += prem + " , ";
            }
        if(goal.elm.innerHTML !== ""){
            var str = goal.elm.innerHTML;
            goal.elm.innerHTML = str.substr(0,str.length - 2);
            }
        goal.elm.innerHTML += " &#8870; " + goal.conc;
        };
    pub.createBoxesHtml = function(boxes){
        var createBox = this.createBoxHtml;
        for(var i = 0; i < boxes.length; i++){
            var box = boxes[i];
            var text = box.innerHTML;

            box.style.display = "block";
            box.innerHTML = "";
            createBox(box,text);
            }
        };
    pub.createBoxLatex = function(c,ind){
        var goal = {prems:[],conc:"",elm:null};
        var ind = ind.replace(/&gt;|&lt;/g,function(x){
            if(x === "&gt;"){
                return ">";
                }
            return "<";
            });
        var tokens = lexer(ind);
        var absyn = parser(tokens);
        if(absyn.error){
            return latex.newError(ind,c,absyn.error_msg);
            }
        traverse_lnr = 1;
        traverse_bindings = {};
        return traverseLines(latex,"",goal,absyn.lines.lines).toString();
        };
    return pub;
    };
